#include "main.h"
#include "transmisja.h"
#include "RamkiKarty.h"
#include "RamkiCzujnikow.h"
#include "EEPROM.h"
#include "interrupts.h"


// PIC18F26K80 Configuration Bit Settings

#include <p18F26K80.h>

// CONFIG1L
#pragma config RETEN = OFF      // VREG Sleep Enable bit (Ultra low-power regulator is Disabled (Controlled by REGSLP bit))
#pragma config INTOSCSEL = HIGH // LF-INTOSC Low-power Enable bit (LF-INTOSC in High-power mode during Sleep)
#pragma config SOSCSEL = DIG    // SOSC Power Selection and mode Configuration bits (Digital (SCLKI) mode)
#pragma config XINST = OFF      // Extended Instruction Set (Disabled)

// CONFIG1H
#pragma config FOSC = HS1       // Oscillator (HS oscillator (Medium power, 4 MHz - 16 MHz))
#pragma config PLLCFG = OFF     // PLL x4 Enable bit (Disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor (Disabled)
#pragma config IESO = OFF       // Internal External Oscillator Switch Over Mode (Disabled)

// CONFIG2L
#pragma config PWRTEN = ON      // Power Up Timer (Enabled)
#pragma config BOREN = ON       // Brown Out Detect (Controlled with SBOREN bit)
#pragma config BORV = 1         // Brown-out Reset Voltage bits (2.7V)
#pragma config BORPWR = ZPBORMV // BORMV Power level (ZPBORMV instead of BORMV is selected)

// CONFIG2H
#pragma config WDTEN = SWDTDIS  // Watchdog Timer (WDT enabled in hardware; SWDTEN bit disabled)
#pragma config WDTPS = 1024     // Watchdog Postscaler (1:1024)

// CONFIG3H
#pragma config CANMX = PORTC    // ECAN Mux bit (ECAN TX and RX pins are located on RC6 and RC7, respectively)
#pragma config MSSPMSK = MSK7   // MSSP address masking (7 Bit address masking mode)
#pragma config MCLRE = ON       // Master Clear Enable (MCLR Enabled, RE3 Disabled)

// CONFIG4L
#pragma config STVREN = ON      // Stack Overflow Reset (Enabled)
#pragma config BBSIZ = BB1K     // Boot Block Size (1K word Boot Block size)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protect 00800-03FFF (Disabled)
#pragma config CP1 = OFF        // Code Protect 04000-07FFF (Disabled)
#pragma config CP2 = OFF        // Code Protect 08000-0BFFF (Disabled)
#pragma config CP3 = OFF        // Code Protect 0C000-0FFFF (Disabled)

// CONFIG5H
#pragma config CPB = OFF        // Code Protect Boot (Disabled)
#pragma config CPD = OFF        // Data EE Read Protect (Disabled)

// CONFIG6L
#pragma config WRT0 = OFF       // Table Write Protect 00800-03FFF (Disabled)
#pragma config WRT1 = OFF       // Table Write Protect 04000-07FFF (Disabled)
#pragma config WRT2 = OFF       // Table Write Protect 08000-0BFFF (Disabled)
#pragma config WRT3 = OFF       // Table Write Protect 0C000-0FFFF (Disabled)

// CONFIG6H
#pragma config WRTC = ON        // Config. Write Protect (Enabled)
#pragma config WRTB = ON        // Table Write Protect Boot (Enabled)
#pragma config WRTD = OFF       // Data EE Write Protect (Disabled)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protect 00800-03FFF (Disabled)
#pragma config EBTR1 = OFF      // Table Read Protect 04000-07FFF (Disabled)
#pragma config EBTR2 = OFF      // Table Read Protect 08000-0BFFF (Disabled)
#pragma config EBTR3 = OFF      // Table Read Protect 0C000-0FFFF (Disabled)

// CONFIG7H
#pragma config EBTRB = OFF      // Table Read Protect Boot (Disabled)



#pragma romdata cb=Const_ADR
    rom WORD czas_bootldr = 0x05;
    rom WORD wersjaOprogramowania = 0x012B;
#pragma romdata

KartaStruct kartaCzujnikowa;

/*******************************************************************
Funkcja: void Init()
Opis funkcji: Funkcja inicjalizujaca zmienne programu 
			wraz z peryferiami
Data: 07.10.08
Autor: Mariusz Chrobak
*****************************************************************/
static void Init(void)
{
    //ustawienie stanow i kierunkow portow
    ANCON0 = 0;
    ANCON1 = 0;
    LATA = 0;
    LATB = 0;
    LATC = 0;
    TRISA = 0x0C;
    TRISB = 0xC0;
    TRISC = 0xBF;
    STATUS_LED = LED_OFF;

    RCONbits.IPEN = 1; // !! wazne

    //TMR0 uzywany do MiWi

    //TMR1 u?ywany do obslugi zdarzen
    TMR0H = 0x3C;
    TMR0L = 0xAF;//15535; // dla 100ms
    T0CON = 0x29;

    INTCON2bits.TMR0IP = 0;// przerwanie low priority
    INTCONbits.TMR0IE = 1; // przerwanie od przepelnienia
    INTCONbits.TMR0IF= 0; // kasowanie flagi przepelnienia
    T0CONbits.TMR0ON = 1;


    //Enable Global Interrupt
    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1;

}

/*******************************************************************
Funkcja: void InitAll(void)
Opis funkcji: Funkcja inicjalizujaca zmienne programu
			wraz z peryferiami
Data: 07.10.08
Autor: Mariusz Chrobak
*****************************************************************/
void InitAll(void)
{

    WDTCONbits.SWDTEN = 1;

    ClrWdt();
    WylaczPrzerwania();
    //odczytaj zane z wewnetrznego EEPROM
    NVMInit();
    UstawFlagi();

    //inicjalizacja zmiennych i peryferii
    Init();

    SetupCan();

}
/*******************************************************************
Funkcja: int main()
Opis funkcji: Glowna funkcja programu zawierajaca petle glowna
Data: sierpien 2012
*****************************************************************/
void main(void)
{
    InitAll();
    //po inicjalizacji kasuj RCON
    RCON = 0xFF;
    //petla glowna
    for(;;)
    {
        if(kartaCzujnikowa.Flagi.obsluzWeWy)
        {
            kartaCzujnikowa.Flagi.obsluzWeWy = 0;
            ObsluzWeWy();
        }
        
        TransmisjaDanych();
        ClrWdt();
    }
}

