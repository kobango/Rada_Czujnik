#include "main.h"
#include "RamkiKarty.h"
#include "EEPROM.h"
#include "CAN.h"

typedef short          Word16;
typedef unsigned short UWord16;
typedef long           Word32;
typedef unsigned long  UWord32;

typedef union tuReg32 {
  UWord32 Val32;

  struct {
    UWord16 LW;
    UWord16 HW;
  } Word;

  char Val[4];
} uReg32;

mID ramkaCanRxKarty, ramkaCanTxKarty;


/*******************************************************************
Funkcja: static void RamkaPrzypisanAdresow(mID *message)
Opis funkcji: Przypisanie czujników do danego wewy
Data: 13.09.2013
Autor: Pawel Kasperek
*****************************************************************/
static void RamkaPrzypisanAdresow(mID *message, BYTE nrWeWyU8)
{
    BYTE i;
    BYTE *pointer1U8, *pointer2U8;
    WORD adresU16;

    if(message->message_type == CAN_MSG_RTR)
    {
        message->data_length = 8;
        for(i=0; i<(message->data_length/2); i++)
        {
            message->data[2*i] = (BYTE)(kartaCzujnikowa.weWy[nrWeWyU8].czujnik[i].adresCzujnikaU16>>8);
            message->data[(2*i)+1] = (BYTE)kartaCzujnikowa.weWy[nrWeWyU8].czujnik[i].adresCzujnikaU16;

        }
    }
    else
    {
        for(i=0; i<(message->data_length/2); i++)
        {
            kartaCzujnikowa.weWy[nrWeWyU8].czujnik[i].adresCzujnikaU16 = 
                    ((WORD)message->data[2*i]<<8) | (WORD)message->data[(2*i)+1];
            //zapisz adres nowego czujniczka do eeprom
            pointer1U8 = (BYTE*)&kartaCzujnikowa.weWy[nrWeWyU8].czujnik[i].adresCzujnikaU16;
            pointer2U8 = (BYTE*)&kartaCzujnikowa;
            adresU16 = (WORD)pointer1U8 - (WORD)pointer2U8 + (WORD)EEPROM_OFFSET;
            WritetoEEPROM(adresU16++, message->data[2*i]);
            WritetoEEPROM(adresU16, message->data[(2*i)+1]);

            //odznacz ze jest przypisany
            if(kartaCzujnikowa.weWy[nrWeWyU8].czujnik[i].adresCzujnikaU16 > 0)
            {
                kartaCzujnikowa.weWy[nrWeWyU8].czujnik[i].Flagi.przypisanyCzujnik = 1;
            }
            else
            {
                kartaCzujnikowa.weWy[nrWeWyU8].czujnik[i].Flagi.przypisanyCzujnik = 0;
            }
            //i zapisz do eeprom fakt przypisania
            pointer1U8 = (BYTE*)&kartaCzujnikowa.weWy[nrWeWyU8].czujnik[i].Flagi.flagiU8;
            pointer2U8 = (BYTE*)&kartaCzujnikowa;
            adresU16 = (WORD)pointer1U8 - (WORD)pointer2U8 + (WORD)EEPROM_OFFSET;
            WritetoEEPROM(adresU16, kartaCzujnikowa.weWy[nrWeWyU8].czujnik[i].Flagi.flagiU8);
        }
    }
}

/*******************************************************************
Funkcja: static void RamkaNazwaWlasnaCzujnika(mID *message)
Opis funkcji: Zapis i odczyt nazw wlasnych czujniczkow
Data: 13.09.2013
Autor: Pawel Kasperek
*****************************************************************/
static void RamkaNazwaWlasnaCzujnika(mID *message, BYTE nrCzujnika)
{
    BYTE i;

    if(message->message_type == CAN_MSG_RTR)
    {
        message->data_length = 8;
        for(i=0; i<message->data_length; i++)
        {
            message->data[i] = ReadfromEEPROM(((WORD)nrCzujnika*(WORD)BAJTOW_NAZWY) + (WORD)i);
        }
    }
    else
    {
        for(i=0; i<message->data_length; i++)
        {
            WritetoEEPROM(((WORD)nrCzujnika*(WORD)BAJTOW_NAZWY) + (WORD)i, message->data[i]);
        }
    }
}

/*******************************************************************
Funkcja: static void RamkaStatusu(mID *message)
Opis funkcji: Informacja stanie karty czujnikowej
Data: 13.09.2013
Autor: Pawel Kasperek
*****************************************************************/
static void RamkaStatusu(mID *message)
{
    if(message->frame_type == CAN_MSG_RTR)
    {
        message->data_length = 1;
        message->data[0] = 1;
    }
}

/*******************************************************************
Funkcja: static void RamkaPrzypisanieBazowych(mID *message)
Opis funkcji: 0x70-0x7D informacje o przypisaniu adresu stacji do we-wy karty interfejsu
Data: 03.02.2012
Autor: Zuzanna Segiet
*****************************************************************/
static void RamkaPrzypisanieBazowych(mID *message, BYTE nrWeWyU8)
{
    BYTE i;
    BYTE *pointer1U8, *pointer2U8;
    WORD adresU16;

    if(message->message_type == CAN_MSG_RTR)
    {
        message->data_length = 8;
        for(i=0; i <(message->data_length/2); i++)
        {
            message->data[2*i] = (BYTE)(kartaCzujnikowa.weWy[nrWeWyU8+i].adresBazowejU16>>8);
            message->data[(2*i)+1] =(BYTE)kartaCzujnikowa.weWy[nrWeWyU8+i].adresBazowejU16;
        }
     }
    else
    {
        for(i=0; i<(message->data_length/2); i++)
        {
            kartaCzujnikowa.weWy[nrWeWyU8+i].adresBazowejU16=
                    ((WORD)message->data[2*i]<<8) | message->data[(2*i)+1];
            //zapisz adres nowego adresu bazowki do eeprom
            pointer1U8 = (BYTE*)&kartaCzujnikowa.weWy[nrWeWyU8+i].adresBazowejU16;
            pointer2U8 = (BYTE*)&kartaCzujnikowa;
            adresU16 = (WORD)pointer1U8 - (WORD)pointer2U8 + (WORD)EEPROM_OFFSET;
            WritetoEEPROM(adresU16++, message->data[2*i]);
            WritetoEEPROM(adresU16, message->data[(2*i)+1]);
        }
    }
}

/*******************************************************************
Funkcja: static void RamkaWersjiOprogramowania(mID *message)
Opis funkcji: Informacja o wersji oprogramowania i hardwareu
Data: 11.07.2013
Autor: Pawel Kasperek
*****************************************************************/
static void RamkaWersjiOprogramowania(mID *message)
{
    unsigned int wersjaOprogramowaniaU16;
    uReg32 wersjaSprzetuAdres, wersjaSprzetu;

    wersjaOprogramowaniaU16 = wersjaOprogramowania;
    wersjaSprzetuAdres.Val32 = 0x0402;
    ReadFlash(wersjaSprzetuAdres.Val32,2,wersjaSprzetu.Val);

    if(message->message_type == CAN_MSG_RTR)
    {
        message->data_length = 4;
        message->data[0] = (unsigned char)(wersjaOprogramowaniaU16 >> 8);
        message->data[1] = (unsigned char)wersjaOprogramowaniaU16;
        message->data[2] = (unsigned char)(wersjaSprzetu.Val[1]);
        message->data[3] = (unsigned char)wersjaSprzetu.Val[0];
    }
}

/*******************************************************************
Funkcja: void ObsluzRamkeCan(void)
Opis funkcji: obsluga rozpakowanej ramki CAN
Data: 20.08.2012
Autor: Mariusz Chrobak
*****************************************************************/
void ObsluzRamkeCan(void)
{
    unsigned char id_ramki;

    id_ramki = (unsigned char)(ramkaCanRxKarty.id>>18);
    id_ramki &= 0x7F;

    if(id_ramki < 0x09)
    {
        RamkaPrzypisanAdresow(&ramkaCanRxKarty, id_ramki);
    }
    else if((id_ramki>0x10) && (id_ramki<0x31))
    {
        RamkaNazwaWlasnaCzujnika(&ramkaCanRxKarty, id_ramki-0x11);
    }

    switch(id_ramki)
    {
        case 0x09:
            RamkaStatusu(&ramkaCanRxKarty);
            break;
        case 0x70:
        case 0x71:
            RamkaPrzypisanieBazowych(&ramkaCanRxKarty, id_ramki-0x70);
            break;
        case 0x83:
            RamkaWersjiOprogramowania(&ramkaCanRxKarty);
            break;
    }
    if(ramkaCanRxKarty.message_type == CAN_MSG_RTR)
    {
        GenerujCAN_ID(&ramkaCanRxKarty,id_ramki);
        WyslijRamkeCan(&ramkaCanRxKarty);
    }
    //wlacz przerwania od CANa
    BIE0bits.RXB0IE = 1;
    BIE0bits.RXB1IE = 1;

}

/*******************************************************************
Funkcja: void WyslijRamkeStatusu(void)
Opis funkcji: obsluga rozpakowanej ramki CAN
Data: 13.09.2013
Autor: Pawel Kasperek
*****************************************************************/
void WyslijRamkeStatusu(void)
{
    ramkaCanTxKarty.frame_type = CAN_MSG_RTR;
    RamkaStatusu(&ramkaCanTxKarty);
    GenerujCAN_ID(&ramkaCanTxKarty,0x09);
    ramkaCanTxKarty.id |= 0x14000;
    WyslijRamkeCan(&ramkaCanTxKarty);
}
